// SPDX-License-Identifier: MIT
pragma solidity >=0.8.9;

interface IERC721 {
    function transfer(address, uint) external;

    function transferFrom(
        address,
        address,
        uint
    ) external;
}

contract Auction {
    event Start(uint numDays);
    event Bid(address indexed sender, uint amount);
    event Withdraw(address indexed bidder, uint amount);
    event End(address winner, uint amount);

    IERC721 public nft;
    uint public nftId;

    address payable public seller;
    uint public endAt;
    bool public started;
    bool public ended;
    uint private hiddenGoalPrice;

    address public highestBidder;
    uint public highestBid;
    mapping(address => uint) public bids;
    //address public _nft;
     //uint public _nftId;
    constructor(

        uint _startingBid

    )

    {

        seller = payable(msg.sender);
        highestBid = _startingBid;
    }

        function setNFT(uint _nftID, address _nft)public {
             nft = IERC721(_nft);
            nftId = _nftID;

        }
    function random() private view returns (uint) {
        // sha3 and now have been deprecated
        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, [10,20,30,40,50,60,70,80,90,100])));
        // convert hash to integer
        // players is an array of entrants

    }
    function randomNumDays() private view returns(uint){
        uint randomDays = random();
        return randomDays;
    }
    //added a way to make number of days random
    function start(uint numDays, uint hiddenPrice) external {
        require(!started, "started");
        require(msg.sender == seller, "not seller");
        //nft.transferFrom(msg.sender, address(this), nftId);
        if (numDays == 0){
            numDays = randomNumDays();
        }
        started = true;
        endAt = block.timestamp + (numDays*60);
        hiddenGoalPrice = hiddenPrice;
        emit Start(numDays);
    }

    function setEndTime() private{
        endAt = block.timestamp + 1 minutes;
    }
    function bid(uint newBid) external payable {

        require(started, "not started");
        require(block.timestamp < endAt, "ended");
        require(newBid > highestBid, "value < highest");

        if (highestBidder != address(0)) {
            bids[highestBidder] += highestBid;
        }

        highestBidder = msg.sender;
        highestBid = newBid;

        emit Bid(msg.sender, newBid);
    }

    function withdraw() external {
        uint bal = bids[msg.sender];
        bids[msg.sender] = 0;
        payable(msg.sender).transfer(bal);

        emit Withdraw(msg.sender, bal);
    }
    function extendTime() private{
        if(hiddenGoalPrice < highestBid){
            if (endAt <= 10){
                endAt += 10 days;
            }
        }
    }

    function hiddenGoalPriceIsZero() private {
        hiddenGoalPrice = 0;
    }
    function end() external {
        extendTime();
        require(started, "not started");
        //require(block.timestamp <= endAt, "not ended");
        require(!ended, "ended");

        ended = true;
        if (highestBidder != address(0)) {
            nft.safeTransferFrom(address(this), highestBidder, nftId);
            seller.transfer(highestBid);
        } else {
            nft.safeTransferFrom(address(this), highestBidder, nftId);
        }

        emit End(highestBidder, highestBid);
    }
}
